{
  "info": {
    "name": "Stock Portfolio BFF - Stocks",
    "description": "Collection for managing stocks in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. Authentication is handled automatically through a pre-request script that:\n1. Checks for an existing access token\n2. If no token exists, requests a new one from Keycloak using credentials from environment variables\n3. Stores the tokens in environment variables for subsequent requests\n\nRequired Environment Variables:\n- keycloakUrl: Keycloak server URL (e.g., http://localhost:8080)\n- realm: Keycloak realm name (e.g., stock-portfolio)\n- clientId: Client ID for the application (e.g., bff-client)\n- clientSecret: Client secret for authentication\n- username: Test user username\n- password: Test user password\n- accessToken: (Managed automatically) Current access token\n- refreshToken: (Managed automatically) Current refresh token\n\nAdditional Variables:\n- categoryId: ID of the category when filtering stocks by category\n\nAll endpoints require a valid access token, which is automatically managed and included in the Authorization header. This collection provides comprehensive stock management including searching, creating, updating, and retrieving stock information by various identifiers (ISIN, WKN, Symbol).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Check if we have a valid access token",
          "const accessToken = pm.environment.get('accessToken');",
          "if (!accessToken) {",
          "    // No token - get a new one",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    const clientId = pm.environment.get('clientId');",
          "    const clientSecret = pm.environment.get('clientSecret');",
          "    const username = pm.environment.get('username');",
          "    const password = pm.environment.get('password');",
          "",
          "    pm.sendRequest({",
          "        url: tokenUrl,",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/x-www-form-urlencoded'",
          "        },",
          "        body: {",
          "            mode: 'urlencoded',",
          "            urlencoded: [",
          "                { key: 'grant_type', value: 'password' },",
          "                { key: 'client_id', value: clientId },",
          "                { key: 'client_secret', value: clientSecret },",
          "                { key: 'username', value: username },",
          "                { key: 'password', value: password }",
          "            ]",
          "        }",
          "    }, function (err, res) {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            const response = res.json();",
          "            pm.environment.set('accessToken', response.access_token);",
          "            pm.environment.set('refreshToken', response.refresh_token);",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Search Stocks",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of stocks', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('isin');",
              "        pm.expect(response[0]).to.have.property('name');",
              "        pm.expect(response[0]).to.have.property('symbol');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/search?query=Apple",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "search"],
          "query": [
            {
              "key": "query",
              "value": "Apple"
            }
          ]
        }
      }
    },
    {
      "name": "Get All Stocks",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of stocks', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('isin');",
              "        pm.expect(response[0]).to.have.property('name');",
              "        pm.expect(response[0]).to.have.property('symbol');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks",
          "host": ["{{baseUrl}}"],
          "path": ["stocks"]
        }
      }
    },
    {
      "name": "Get Stocks by Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of stocks in category', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('isin');",
              "        pm.expect(response[0]).to.have.property('name');",
              "        pm.expect(response[0]).to.have.property('categoryId');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/category/{{categoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "category", "{{categoryId}}"]
        }
      }
    },
    {
      "name": "Create Stock",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has correct stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('isin');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('symbol');",
              "    pm.expect(response).to.have.property('wkn');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"isin\": \"US0378331005\",\n    \"name\": \"Apple Inc.\",\n    \"symbol\": \"AAPL\",\n    \"wkn\": \"865985\",\n    \"categoryId\": \"{{categoryId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/stocks",
          "host": ["{{baseUrl}}"],
          "path": ["stocks"]
        }
      }
    },
    {
      "name": "Get Stock by ISIN",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.isin).to.eql('US0378331005');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('symbol');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/isin/US0378331005",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "isin", "US0378331005"]
        }
      }
    },
    {
      "name": "Get Stock by Symbol",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.symbol).to.eql('AAPL');",
              "    pm.expect(response).to.have.property('isin');",
              "    pm.expect(response).to.have.property('name');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/symbol/AAPL",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "symbol", "AAPL"]
        }
      }
    },
    {
      "name": "Get Stock by WKN",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.wkn).to.eql('865985');",
              "    pm.expect(response).to.have.property('isin');",
              "    pm.expect(response).to.have.property('name');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/wkn/865985",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "wkn", "865985"]
        }
      }
    },
    {
      "name": "Get Stock Details",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has detailed stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.isin).to.eql('US0378331005');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('description');",
              "    pm.expect(response).to.have.property('sector');",
              "    pm.expect(response).to.have.property('marketCap');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/details/US0378331005",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "details", "US0378331005"]
        }
      }
    },
    {
      "name": "Update Stock",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has updated stock data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.isin).to.eql('US0378331005');",
              "    pm.expect(response.name).to.eql('Updated Apple Inc.');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Updated Apple Inc.\",\n    \"description\": \"Updated description\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/stocks/US0378331005",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "US0378331005"]
        }
      }
    },
    {
      "name": "Delete Stock",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function() {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/stocks/US0378331005",
          "host": ["{{baseUrl}}"],
          "path": ["stocks", "US0378331005"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

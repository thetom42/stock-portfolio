{
  "info": {
    "name": "Stock Portfolio BFF - Transactions",
    "description": "Collection for managing stock transactions in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. Authentication is handled automatically through a pre-request script that:\n1. Checks for an existing access token\n2. If no token exists, requests a new one from Keycloak using credentials from environment variables\n3. Stores the tokens in environment variables for subsequent requests\n\nRequired Environment Variables:\n- keycloakUrl: Keycloak server URL (e.g., http://localhost:8080)\n- realm: Keycloak realm name (e.g., stock-portfolio)\n- clientId: Client ID for the application (e.g., bff-client)\n- clientSecret: Client secret for authentication\n- username: Test user username\n- password: Test user password\n- accessToken: (Managed automatically) Current access token\n- refreshToken: (Managed automatically) Current refresh token\n\nAdditional Variables:\n- holdingId: ID of the holding for transaction operations\n- portfolioId: ID of the portfolio when retrieving portfolio transactions\n- transactionId: ID of the specific transaction being accessed\n\nAll endpoints require a valid access token, which is automatically managed and included in the Authorization header. This collection provides comprehensive transaction management including creating new transactions and retrieving transaction history with filtering and pagination support.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Check if we have a valid access token",
          "const accessToken = pm.environment.get('accessToken');",
          "if (!accessToken) {",
          "    // No token - get a new one",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    const clientId = pm.environment.get('clientId');",
          "    const clientSecret = pm.environment.get('clientSecret');",
          "    const username = pm.environment.get('username');",
          "    const password = pm.environment.get('password');",
          "",
          "    pm.sendRequest({",
          "        url: tokenUrl,",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/x-www-form-urlencoded'",
          "        },",
          "        body: {",
          "            mode: 'urlencoded',",
          "            urlencoded: [",
          "                { key: 'grant_type', value: 'password' },",
          "                { key: 'client_id', value: clientId },",
          "                { key: 'client_secret', value: clientSecret },",
          "                { key: 'username', value: username },",
          "                { key: 'password', value: password }",
          "            ]",
          "        }",
          "    }, function (err, res) {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            const response = res.json();",
          "            pm.environment.set('accessToken', response.access_token);",
          "            pm.environment.set('refreshToken', response.refresh_token);",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Create Transaction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has correct transaction data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response.holdingId).to.eql(pm.variables.get('holdingId'));",
              "    pm.expect(response.type).to.eql('BUY');",
              "    pm.expect(response.quantity).to.eql(100);",
              "    pm.variables.set('transactionId', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"type\": \"BUY\",\n    \"quantity\": 100,\n    \"price\": 150.50,\n    \"date\": \"2024-01-15T10:00:00Z\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/transactions/holding/{{holdingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["transactions", "holding", "{{holdingId}}"]
        }
      }
    },
    {
      "name": "Get Transactions by Holding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of transactions', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('id');",
              "        pm.expect(response[0]).to.have.property('type');",
              "        pm.expect(response[0]).to.have.property('quantity');",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('date');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/transactions/holding/{{holdingId}}?startDate=2024-01-01T00:00:00Z&endDate=2024-12-31T23:59:59Z&type=BUY&sort=date&order=desc&page=1&limit=10",
          "host": ["{{baseUrl}}"],
          "path": ["transactions", "holding", "{{holdingId}}"],
          "query": [
            {
              "key": "startDate",
              "value": "2024-01-01T00:00:00Z"
            },
            {
              "key": "endDate",
              "value": "2024-12-31T23:59:59Z"
            },
            {
              "key": "type",
              "value": "BUY"
            },
            {
              "key": "sort",
              "value": "date"
            },
            {
              "key": "order",
              "value": "desc"
            },
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      }
    },
    {
      "name": "Get Transactions by Portfolio",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of transactions', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('id');",
              "        pm.expect(response[0]).to.have.property('type');",
              "        pm.expect(response[0]).to.have.property('quantity');",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('date');",
              "        pm.expect(response[0]).to.have.property('holdingId');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/transactions/portfolio/{{portfolioId}}?startDate=2024-01-01T00:00:00Z&endDate=2024-12-31T23:59:59Z&type=BUY&sort=date&order=desc&page=1&limit=10",
          "host": ["{{baseUrl}}"],
          "path": ["transactions", "portfolio", "{{portfolioId}}"],
          "query": [
            {
              "key": "startDate",
              "value": "2024-01-01T00:00:00Z"
            },
            {
              "key": "endDate",
              "value": "2024-12-31T23:59:59Z"
            },
            {
              "key": "type",
              "value": "BUY"
            },
            {
              "key": "sort",
              "value": "date"
            },
            {
              "key": "order",
              "value": "desc"
            },
            {
              "key": "page",
              "value": "1"
            },
            {
              "key": "limit",
              "value": "10"
            }
          ]
        }
      }
    },
    {
      "name": "Get Transaction by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct transaction data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.variables.get('transactionId'));",
              "    pm.expect(response).to.have.property('type');",
              "    pm.expect(response).to.have.property('quantity');",
              "    pm.expect(response).to.have.property('price');",
              "    pm.expect(response).to.have.property('date');",
              "    pm.expect(response).to.have.property('holdingId');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/transactions/{{transactionId}}",
          "host": ["{{baseUrl}}"],
          "path": ["transactions", "{{transactionId}}"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

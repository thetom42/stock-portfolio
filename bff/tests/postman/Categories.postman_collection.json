{
  "info": {
    "name": "Stock Portfolio BFF - Categories",
    "description": "Collection for managing stock categories in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication with support for both regular users and administrators.\n\nRequired Environment Variables:\n- Regular User Authentication:\n  * username: Regular test user username\n  * password: Regular test user password\n  * accessToken: Regular user access token\n\n- Admin Authentication:\n  * adminUsername: Admin test user username\n  * adminPassword: Admin test user password\n  * adminAccessToken: Admin user access token\n\nThe collection includes tests for both regular user operations (viewing categories) and admin-specific operations (creating, updating, deleting categories). Category IDs are dynamically managed through the test flow.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Function to decode JWT token",
          "const decodeToken = (token) => {",
          "    try {",
          "        const base64Url = token.split('.')[1];",
          "        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
          "        return JSON.parse(atob(base64));",
          "    } catch (error) {",
          "        console.error('Error decoding token:', error);",
          "        return null;",
          "    }",
          "};",
          "",
          "// Function to check if token is expired",
          "const isTokenExpired = (token) => {",
          "    if (!token) return true;",
          "    const decoded = decodeToken(token);",
          "    if (!decoded) return true;",
          "    // Add 30 second buffer to handle network delays",
          "    return decoded.exp * 1000 <= Date.now() + 30000;",
          "};",
          "",
          "// Function to refresh token",
          "const refreshToken = async (isAdmin = false) => {",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const refreshTokenVar = isAdmin ? 'adminRefreshToken' : 'refreshToken';",
          "    const refreshTokenValue = pm.environment.get(refreshTokenVar);",
          "",
          "    if (!refreshTokenValue) {",
          "        return false;",
          "    }",
          "",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    return new Promise((resolve) => {",
          "        pm.sendRequest({",
          "            url: tokenUrl,",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/x-www-form-urlencoded'",
          "            },",
          "            body: {",
          "                mode: 'urlencoded',",
          "                urlencoded: [",
          "                    { key: 'grant_type', value: 'refresh_token' },",
          "                    { key: 'client_id', value: pm.environment.get('clientId') },",
          "                    { key: 'client_secret', value: pm.environment.get('clientSecret') },",
          "                    { key: 'refresh_token', value: refreshTokenValue }",
          "                ]",
          "            }",
          "        }, function (err, res) {",
          "            if (err || res.code >= 400) {",
          "                console.error('Error refreshing token:', err || res.json());",
          "                resolve(false);",
          "            } else {",
          "                const response = res.json();",
          "                pm.environment.set(tokenVar, response.access_token);",
          "                pm.environment.set(refreshTokenVar, response.refresh_token);",
          "                resolve(true);",
          "            }",
          "        });",
          "    });",
          "};",
          "",
          "// Function to get new token using password grant",
          "const getNewToken = async (isAdmin = false) => {",
          "    const username = isAdmin ? pm.environment.get('adminUsername') : pm.environment.get('username');",
          "    const password = isAdmin ? pm.environment.get('adminPassword') : pm.environment.get('password');",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const refreshTokenVar = isAdmin ? 'adminRefreshToken' : 'refreshToken';",
          "",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    return new Promise((resolve) => {",
          "        pm.sendRequest({",
          "            url: tokenUrl,",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/x-www-form-urlencoded'",
          "            },",
          "            body: {",
          "                mode: 'urlencoded',",
          "                urlencoded: [",
          "                    { key: 'grant_type', value: 'password' },",
          "                    { key: 'client_id', value: pm.environment.get('clientId') },",
          "                    { key: 'client_secret', value: pm.environment.get('clientSecret') },",
          "                    { key: 'username', value: username },",
          "                    { key: 'password', value: password }",
          "                ]",
          "            }",
          "        }, function (err, res) {",
          "            if (err || res.code >= 400) {",
          "                console.error('Error getting new token:', err || res.json());",
          "                resolve(false);",
          "            } else {",
          "                const response = res.json();",
          "                pm.environment.set(tokenVar, response.access_token);",
          "                pm.environment.set(refreshTokenVar, response.refresh_token);",
          "                resolve(true);",
          "            }",
          "        });",
          "    });",
          "};",
          "",
          "// Main token management function",
          "const manageToken = async (isAdmin = false) => {",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const currentToken = pm.environment.get(tokenVar);",
          "",
          "    // If token exists, check if it's expired",
          "    if (currentToken && !isTokenExpired(currentToken)) {",
          "        return; // Token is valid, no action needed",
          "    }",
          "",
          "    // Try to refresh token first",
          "    const refreshed = await refreshToken(isAdmin);",
          "    if (refreshed) {",
          "        return; // Successfully refreshed",
          "    }",
          "",
          "    // If refresh failed, get new token",
          "    await getNewToken(isAdmin);",
          "};",
          "",
          "// Execute token management based on request name",
          "if (pm.info.requestName.toLowerCase().includes('admin')) {",
          "    manageToken(true);",
          "} else {",
          "    manageToken(false);",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Regular User Operations",
      "item": [
        {
          "name": "Get All Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains categories array', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    pm.expect(response).to.have.property('categories');",
                  "    pm.expect(response.categories).to.be.an('array');",
                  "    if (response.categories.length > 0) {",
                  "        pm.expect(response.categories[0]).to.have.property('id');",
                  "        pm.expect(response.categories[0]).to.have.property('name');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            }
          }
        },
        {
          "name": "Get Category by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has valid category data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    if (response.categories) {",
                  "        pm.expect(response.categories).to.be.an('array');",
                  "        const category = response.categories.find(c => c.id === pm.environment.get('categoryId'));",
                  "        pm.expect(category).to.have.property('name');",
                  "    } else if (response.error) {",
                  "        pm.expect(response.error).to.have.property('message');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "{{categoryId}}"
              ]
            }
          }
        },
        {
          "name": "Create Category (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 500', function() {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test('Response has correct error message', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.have.property('message');",
                  "    pm.expect(response.error.message).to.include('Category with this name already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Technology\",\n    \"description\": \"Technology sector stocks\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Admin Operations",
      "item": [
        {
          "name": "Admin Create Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has valid status code', function() {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 500]);",
                  "});",
                  "",
                  "pm.test('Response has valid data structure', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    if (pm.response.code === 201) {",
                  "        pm.expect(response).to.have.property('category');",
                  "        pm.expect(response.category).to.have.property('id');",
                  "        pm.expect(response.category).to.have.property('name');",
                  "        pm.environment.set('categoryId', response.category.id);",
                  "        const uniqueName = `TestCategory_${Date.now()}`;",
                  "        pm.environment.set('uniqueCategoryName', uniqueName);",
                  "    } else {",
                  "        pm.expect(response).to.have.property('error');",
                  "        pm.expect(response.error).to.have.property('message');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{uniqueCategoryName}}\",\n    \"description\": \"Test category description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories"
              ]
            }
          }
        },
        {
          "name": "Admin Update Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has valid status code', function() {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "pm.test('Response has valid data structure', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.be.an('object');",
                  "    if (pm.response.code === 200) {",
                  "        pm.expect(response).to.have.property('category');",
                  "        pm.expect(response.category.id).to.eql(pm.environment.get('categoryId'));",
                  "        pm.expect(response.category.name).to.eql('{{uniqueCategoryName}}_Updated');",
                  "    } else {",
                  "        pm.expect(response).to.have.property('error');",
                  "        pm.expect(response.error).to.have.property('message');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{uniqueCategoryName}}_Updated\",\n    \"description\": \"Updated test category description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "{{categoryId}}"
              ]
            }
          }
        },
        {
          "name": "Admin Delete Category",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response has valid status code', function() {",
                  "    pm.expect(pm.response.code).to.be.oneOf([204, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 404) {",
                  "    pm.test('Response has error message', function() {",
                  "        const response = pm.response.json();",
                  "        pm.expect(response).to.have.property('error');",
                  "        pm.expect(response.error).to.have.property('message');",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminAccessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/categories/{{categoryId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "categories",
                "{{categoryId}}"
              ]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}
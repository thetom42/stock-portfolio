{
  "info": {
    "name": "Stock Portfolio BFF - Categories",
    "description": "Collection for managing stock categories in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. Authentication is handled automatically through a pre-request script that:\n1. Checks for an existing access token\n2. If no token exists, requests a new one from Keycloak using credentials from environment variables\n3. Stores the tokens in environment variables for subsequent requests\n\nRequired Environment Variables:\n- keycloakUrl: Keycloak server URL (e.g., http://localhost:8080)\n- realm: Keycloak realm name (e.g., stock-portfolio)\n- clientId: Client ID for the application (e.g., bff-client)\n- clientSecret: Client secret for authentication\n- username: Test user username\n- password: Test user password\n- accessToken: (Managed automatically) Current access token\n- refreshToken: (Managed automatically) Current refresh token\n\nAll endpoints require a valid access token, which is automatically managed and included in the Authorization header.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Check if we have a valid access token",
          "const accessToken = pm.environment.get('accessToken');",
          "if (!accessToken) {",
          "    // No token - get a new one",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    const clientId = pm.environment.get('clientId');",
          "    const clientSecret = pm.environment.get('clientSecret');",
          "    const username = pm.environment.get('username');",
          "    const password = pm.environment.get('password');",
          "",
          "    pm.sendRequest({",
          "        url: tokenUrl,",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/x-www-form-urlencoded'",
          "        },",
          "        body: {",
          "            mode: 'urlencoded',",
          "            urlencoded: [",
          "                { key: 'grant_type', value: 'password' },",
          "                { key: 'client_id', value: clientId },",
          "                { key: 'client_secret', value: clientSecret },",
          "                { key: 'username', value: username },",
          "                { key: 'password', value: password }",
          "            ]",
          "        }",
          "    }, function (err, res) {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            const response = res.json();",
          "            pm.environment.set('accessToken', response.access_token);",
          "            pm.environment.set('refreshToken', response.refresh_token);",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Create Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has correct category data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response).to.have.property('name');",
              "    pm.variables.set('categoryId', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Technology\",\n    \"description\": \"Technology sector stocks\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/categories",
          "host": ["{{baseUrl}}"],
          "path": ["categories"]
        }
      }
    },
    {
      "name": "Get All Categories",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of categories', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('id');",
              "        pm.expect(response[0]).to.have.property('name');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/categories",
          "host": ["{{baseUrl}}"],
          "path": ["categories"]
        }
      }
    },
    {
      "name": "Get Category by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct category data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.variables.get('categoryId'));",
              "    pm.expect(response).to.have.property('name');",
              "    pm.expect(response).to.have.property('description');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/categories/{{categoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["categories", "{{categoryId}}"]
        }
      }
    },
    {
      "name": "Update Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has updated category data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.variables.get('categoryId'));",
              "    pm.expect(response.name).to.eql('Updated Technology');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Updated Technology\",\n    \"description\": \"Updated technology sector description\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/categories/{{categoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["categories", "{{categoryId}}"]
        }
      }
    },
    {
      "name": "Delete Category",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function() {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/categories/{{categoryId}}",
          "host": ["{{baseUrl}}"],
          "path": ["categories", "{{categoryId}}"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

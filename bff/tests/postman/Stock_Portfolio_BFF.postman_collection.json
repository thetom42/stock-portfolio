{
  "info": {
    "name": "Stock Portfolio BFF",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct user data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.email).to.eql(pm.variables.get('userEmail'));",
                  "    pm.expect(response.firstName).to.eql('Test');",
                  "    pm.expect(response.lastName).to.eql('User');",
                  "    pm.variables.set('userId', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": ["{{baseUrl}}"],
              "path": ["users"]
            }
          }
        }
      ]
    },
    {
      "name": "Portfolios",
      "item": [
        {
          "name": "Create Portfolio",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct portfolio data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response.name).to.eql('Test Portfolio');",
                  "    pm.variables.set('portfolioId', response.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Test Portfolio\",\n    \"description\": \"Test Description\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/portfolios",
              "host": ["{{baseUrl}}"],
              "path": ["portfolios"]
            }
          }
        }
      ]
    },
    {
      "name": "Holdings",
      "item": [
        {
          "name": "Create Holding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function() {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has correct holding data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('HOLDINGS_ID');",
                  "    pm.expect(response.PORTFOLIOS_ID).to.eql(pm.variables.get('portfolioId'));",
                  "    pm.expect(response.ISIN).to.eql('US0378331005');",
                  "    pm.expect(response.QUANTITY).to.eql(100);",
                  "    pm.variables.set('holdingId', response.HOLDINGS_ID);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"PORTFOLIOS_ID\": \"{{portfolioId}}\",\n    \"ISIN\": \"US0378331005\",\n    \"QUANTITY\": 100,\n    \"PRICE\": 150.50\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/holdings",
              "host": ["{{baseUrl}}"],
              "path": ["holdings"]
            }
          }
        },
        {
          "name": "Get Holding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct holding data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.HOLDINGS_ID).to.eql(pm.variables.get('holdingId'));",
                  "    pm.expect(response.PORTFOLIOS_ID).to.eql(pm.variables.get('portfolioId'));",
                  "    pm.expect(response).to.have.property('stock');",
                  "    pm.expect(response).to.have.property('currentPrice');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/holdings/{{holdingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["holdings", "{{holdingId}}"]
            }
          }
        },
        {
          "name": "Update Holding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated holding data', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.HOLDINGS_ID).to.eql(pm.variables.get('holdingId'));",
                  "    pm.expect(response.QUANTITY).to.eql(150);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"QUANTITY\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/holdings/{{holdingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["holdings", "{{holdingId}}"]
            }
          }
        },
        {
          "name": "Get Holding Performance",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has performance metrics', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('totalInvested');",
                  "    pm.expect(response).to.have.property('currentValue');",
                  "    pm.expect(response).to.have.property('totalReturn');",
                  "    pm.expect(response).to.have.property('totalReturnPercentage');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/holdings/{{holdingId}}/performance",
              "host": ["{{baseUrl}}"],
              "path": ["holdings", "{{holdingId}}", "performance"]
            }
          }
        },
        {
          "name": "Get Holding Value",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has value details', function() {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('quantity');",
                  "    pm.expect(response).to.have.property('costBasis');",
                  "    pm.expect(response).to.have.property('averageCost');",
                  "    pm.expect(response).to.have.property('currentValue');",
                  "    pm.expect(response).to.have.property('unrealizedGainLoss');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/holdings/{{holdingId}}/value",
              "host": ["{{baseUrl}}"],
              "path": ["holdings", "{{holdingId}}", "value"]
            }
          }
        },
        {
          "name": "Delete Holding",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function() {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/holdings/{{holdingId}}",
              "host": ["{{baseUrl}}"],
              "path": ["holdings", "{{holdingId}}"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

{
  "info": {
    "name": "Stock Portfolio BFF - Users",
    "description": "Collection for managing users in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. Authentication is handled automatically through a pre-request script that:\n1. Checks for an existing access token\n2. If no token exists, requests a new one from Keycloak using credentials from environment variables\n3. Stores the tokens in environment variables for subsequent requests\n\nRequired Environment Variables:\n- keycloakUrl: Keycloak server URL (e.g., http://localhost:8080)\n- realm: Keycloak realm name (e.g., stock-portfolio)\n- clientId: Client ID for the application (e.g., bff-client)\n- clientSecret: Client secret for authentication\n- username: Test user username\n- password: Test user password\n- accessToken: (Managed automatically) Current access token\n- refreshToken: (Managed automatically) Current refresh token\n\nAdditional Variables:\n- userId: ID of the user being accessed\n- userEmail: Email for user creation (automatically set from random value)\n\nAll endpoints require a valid access token, which is automatically managed and included in the Authorization header. This collection provides user management functionality including registration, profile management, and user administration. Note that some operations may require specific roles (e.g., admin role for certain operations).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Check if we have a valid access token",
          "const accessToken = pm.environment.get('accessToken');",
          "if (!accessToken) {",
          "    // No token - get a new one",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    const clientId = pm.environment.get('clientId');",
          "    const clientSecret = pm.environment.get('clientSecret');",
          "    const username = pm.environment.get('username');",
          "    const password = pm.environment.get('password');",
          "",
          "    pm.sendRequest({",
          "        url: tokenUrl,",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/x-www-form-urlencoded'",
          "        },",
          "        body: {",
          "            mode: 'urlencoded',",
          "            urlencoded: [",
          "                { key: 'grant_type', value: 'password' },",
          "                { key: 'client_id', value: clientId },",
          "                { key: 'client_secret', value: clientSecret },",
          "                { key: 'username', value: username },",
          "                { key: 'password', value: password }",
          "            ]",
          "        }",
          "    }, function (err, res) {",
          "        if (err) {",
          "            console.error(err);",
          "        } else {",
          "            const response = res.json();",
          "            pm.environment.set('accessToken', response.access_token);",
          "            pm.environment.set('refreshToken', response.refresh_token);",
          "        }",
          "    });",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Create User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has correct user data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user).to.have.property('id');",
              "    pm.expect(response.user.email).to.eql(pm.variables.get('userEmail'));",
              "    pm.expect(response.user.firstName).to.eql('Test');",
              "    pm.expect(response.user.lastName).to.eql('User');",
              "    pm.variables.set('userId', response.user.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"password\": \"password123\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users",
          "host": ["{{baseUrl}}"],
          "path": ["users"]
        }
      }
    },
    {
      "name": "Get Own Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct user profile data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user).to.have.property('id');",
              "    pm.expect(response.user).to.have.property('email');",
              "    pm.expect(response.user).to.have.property('firstName');",
              "    pm.expect(response.user).to.have.property('lastName');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/profile/me",
          "host": ["{{baseUrl}}"],
          "path": ["users", "profile", "me"]
        }
      }
    },
    {
      "name": "Update Own Profile",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has updated user profile data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user).to.have.property('id');",
              "    pm.expect(response.user.firstName).to.eql('Updated Test');",
              "    pm.expect(response.user.lastName).to.eql('Updated User');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"firstName\": \"Updated Test\",\n    \"lastName\": \"Updated User\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/profile/me",
          "host": ["{{baseUrl}}"],
          "path": ["users", "profile", "me"]
        }
      }
    },
    {
      "name": "Get User by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct user data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user.id).to.eql(pm.variables.get('userId'));",
              "    pm.expect(response.user).to.have.property('email');",
              "    pm.expect(response.user).to.have.property('firstName');",
              "    pm.expect(response.user).to.have.property('lastName');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      }
    },
    {
      "name": "Update User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has updated user data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.user.id).to.eql(pm.variables.get('userId'));",
              "    pm.expect(response.user.firstName).to.eql('Admin');",
              "    pm.expect(response.user.lastName).to.eql('User');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"firstName\": \"Admin\",\n    \"lastName\": \"User\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      }
    },
    {
      "name": "Delete User",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function() {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/users/{{userId}}",
          "host": ["{{baseUrl}}"],
          "path": ["users", "{{userId}}"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

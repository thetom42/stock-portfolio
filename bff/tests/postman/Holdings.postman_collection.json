{
  "info": {
    "name": "Stock Portfolio BFF - Holdings",
    "description": "Collection for managing stock holdings in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. Holdings are user-specific resources, requiring authentication to ensure users can only access and modify their own holdings through their portfolios.\n\nRequired Environment Variables:\n- Regular User Authentication:\n  * username: Regular test user username\n  * password: Regular test user password\n  * accessToken: Regular user access token\n\nAdditional Variables:\n- portfolioId: ID of the portfolio containing the holdings\n- holdingId: ID of the specific holding being accessed\n\nThe collection includes operations for managing holdings within portfolios, including creation, updates, and retrieving performance metrics. All operations require authentication and verify resource ownership.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Function to get token based on role",
          "const getToken = (isAdmin = false) => {",
          "    const username = isAdmin ? pm.environment.get('adminUsername') : pm.environment.get('username');",
          "    const password = isAdmin ? pm.environment.get('adminPassword') : pm.environment.get('password');",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const refreshTokenVar = isAdmin ? 'adminRefreshToken' : 'refreshToken';",
          "",
          "    const accessToken = pm.environment.get(tokenVar);",
          "    if (!accessToken) {",
          "        const keycloakUrl = pm.environment.get('keycloakUrl');",
          "        const realm = pm.environment.get('realm');",
          "        const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "        const clientId = pm.environment.get('clientId');",
          "        const clientSecret = pm.environment.get('clientSecret');",
          "",
          "        pm.sendRequest({",
          "            url: tokenUrl,",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/x-www-form-urlencoded'",
          "            },",
          "            body: {",
          "                mode: 'urlencoded',",
          "                urlencoded: [",
          "                    { key: 'grant_type', value: 'password' },",
          "                    { key: 'client_id', value: clientId },",
          "                    { key: 'client_secret', value: clientSecret },",
          "                    { key: 'username', value: username },",
          "                    { key: 'password', value: password }",
          "                ]",
          "            }",
          "        }, function (err, res) {",
          "            if (err) {",
          "                console.error(err);",
          "            } else {",
          "                const response = res.json();",
          "                pm.environment.set(tokenVar, response.access_token);",
          "                pm.environment.set(refreshTokenVar, response.refresh_token);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "// Get regular user token since holdings are user-specific",
          "getToken(false);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Create Holding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function() {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has correct holding data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('id');",
              "    pm.expect(response.portfolioId).to.eql(pm.environment.get('portfolioId'));",
              "    pm.expect(response.isin).to.eql('US0378331005');",
              "    pm.expect(response.quantity).to.eql(100);",
              "    pm.environment.set('holdingId', response.id);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"portfolioId\": \"{{portfolioId}}\",\n    \"isin\": \"US0378331005\",\n    \"quantity\": 100,\n    \"price\": 150.50\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/holdings",
          "host": ["{{baseUrl}}"],
          "path": ["holdings"]
        }
      }
    },
    {
      "name": "Get Holding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has correct holding data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.environment.get('holdingId'));",
              "    pm.expect(response.portfolioId).to.eql(pm.environment.get('portfolioId'));",
              "    pm.expect(response).to.have.property('stock');",
              "    pm.expect(response).to.have.property('currentPrice');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}"]
        }
      }
    },
    {
      "name": "Update Holding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has updated holding data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.id).to.eql(pm.environment.get('holdingId'));",
              "    pm.expect(response.quantity).to.eql(150);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"quantity\": 150\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}"]
        }
      }
    },
    {
      "name": "Get Holding Performance",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has performance metrics', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('totalInvested');",
              "    pm.expect(response).to.have.property('currentValue');",
              "    pm.expect(response).to.have.property('totalReturn');",
              "    pm.expect(response).to.have.property('totalReturnPercentage');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}/performance",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}", "performance"]
        }
      }
    },
    {
      "name": "Get Holding Value",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has value details', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('quantity');",
              "    pm.expect(response).to.have.property('costBasis');",
              "    pm.expect(response).to.have.property('averageCost');",
              "    pm.expect(response).to.have.property('currentValue');",
              "    pm.expect(response).to.have.property('unrealizedGainLoss');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}/value",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}", "value"]
        }
      }
    },
    {
      "name": "Get Holding Transactions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of transactions', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('id');",
              "        pm.expect(response[0]).to.have.property('type');",
              "        pm.expect(response[0]).to.have.property('quantity');",
              "        pm.expect(response[0]).to.have.property('price');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}/transactions",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}", "transactions"]
        }
      }
    },
    {
      "name": "Get Holding History",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has history data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('date');",
              "        pm.expect(response[0]).to.have.property('value');",
              "        pm.expect(response[0]).to.have.property('quantity');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}/history",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}", "history"]
        }
      }
    },
    {
      "name": "Get Other User's Holding (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 403', function() {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "pm.test('Response has correct error message', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.error).to.have.property('message');",
              "    pm.expect(response.error.message).to.include('Forbidden');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/other-user-holding-id",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "other-user-holding-id"]
        }
      }
    },
    {
      "name": "Delete Holding",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 204', function() {",
              "    pm.response.to.have.status(204);",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/holdings/{{holdingId}}",
          "host": ["{{baseUrl}}"],
          "path": ["holdings", "{{holdingId}}"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

{
  "info": {
    "name": "Stock Portfolio BFF - Quotes",
    "description": "Collection for retrieving stock quotes in the Stock Portfolio application.\n\nAuthentication:\nThis collection uses Keycloak for authentication. All quote operations require user authentication but do not have admin-specific operations since quotes are read-only data.\n\nRequired Environment Variables:\n- Regular User Authentication:\n  * username: Regular test user username\n  * password: Regular test user password\n  * accessToken: Regular user access token\n\nThe collection provides access to real-time quotes, historical data, and aggregated quote information for portfolios and holdings. All operations require authentication to ensure data access is properly controlled.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Function to decode JWT token",
          "const decodeToken = (token) => {",
          "    try {",
          "        const base64Url = token.split('.')[1];",
          "        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
          "        return JSON.parse(atob(base64));",
          "    } catch (error) {",
          "        console.error('Error decoding token:', error);",
          "        return null;",
          "    }",
          "};",
          "",
          "// Function to check if token is expired",
          "const isTokenExpired = (token) => {",
          "    if (!token) return true;",
          "    const decoded = decodeToken(token);",
          "    if (!decoded) return true;",
          "    // Add 30 second buffer to handle network delays",
          "    return decoded.exp * 1000 <= Date.now() + 30000;",
          "};",
          "",
          "// Function to refresh token",
          "const refreshToken = async (isAdmin = false) => {",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const refreshTokenVar = isAdmin ? 'adminRefreshToken' : 'refreshToken';",
          "    const refreshTokenValue = pm.environment.get(refreshTokenVar);",
          "",
          "    if (!refreshTokenValue) {",
          "        return false;",
          "    }",
          "",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    return new Promise((resolve) => {",
          "        pm.sendRequest({",
          "            url: tokenUrl,",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/x-www-form-urlencoded'",
          "            },",
          "            body: {",
          "                mode: 'urlencoded',",
          "                urlencoded: [",
          "                    { key: 'grant_type', value: 'refresh_token' },",
          "                    { key: 'client_id', value: pm.environment.get('clientId') },",
          "                    { key: 'client_secret', value: pm.environment.get('clientSecret') },",
          "                    { key: 'refresh_token', value: refreshTokenValue }",
          "                ]",
          "            }",
          "        }, function (err, res) {",
          "            if (err || res.code >= 400) {",
          "                console.error('Error refreshing token:', err || res.json());",
          "                resolve(false);",
          "            } else {",
          "                const response = res.json();",
          "                pm.environment.set(tokenVar, response.access_token);",
          "                pm.environment.set(refreshTokenVar, response.refresh_token);",
          "                resolve(true);",
          "            }",
          "        });",
          "    });",
          "};",
          "",
          "// Function to get new token using password grant",
          "const getNewToken = async (isAdmin = false) => {",
          "    const username = isAdmin ? pm.environment.get('adminUsername') : pm.environment.get('username');",
          "    const password = isAdmin ? pm.environment.get('adminPassword') : pm.environment.get('password');",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const refreshTokenVar = isAdmin ? 'adminRefreshToken' : 'refreshToken';",
          "",
          "    const keycloakUrl = pm.environment.get('keycloakUrl');",
          "    const realm = pm.environment.get('realm');",
          "    const tokenUrl = `${keycloakUrl}/realms/${realm}/protocol/openid-connect/token`;",
          "",
          "    return new Promise((resolve) => {",
          "        pm.sendRequest({",
          "            url: tokenUrl,",
          "            method: 'POST',",
          "            header: {",
          "                'Content-Type': 'application/x-www-form-urlencoded'",
          "            },",
          "            body: {",
          "                mode: 'urlencoded',",
          "                urlencoded: [",
          "                    { key: 'grant_type', value: 'password' },",
          "                    { key: 'client_id', value: pm.environment.get('clientId') },",
          "                    { key: 'client_secret', value: pm.environment.get('clientSecret') },",
          "                    { key: 'username', value: username },",
          "                    { key: 'password', value: password }",
          "                ]",
          "            }",
          "        }, function (err, res) {",
          "            if (err || res.code >= 400) {",
          "                console.error('Error getting new token:', err || res.json());",
          "                resolve(false);",
          "            } else {",
          "                const response = res.json();",
          "                pm.environment.set(tokenVar, response.access_token);",
          "                pm.environment.set(refreshTokenVar, response.refresh_token);",
          "                resolve(true);",
          "            }",
          "        });",
          "    });",
          "};",
          "",
          "// Main token management function",
          "const manageToken = async (isAdmin = false) => {",
          "    const tokenVar = isAdmin ? 'adminAccessToken' : 'accessToken';",
          "    const currentToken = pm.environment.get(tokenVar);",
          "",
          "    // If token exists, check if it's expired",
          "    if (currentToken && !isTokenExpired(currentToken)) {",
          "        return; // Token is valid, no action needed",
          "    }",
          "",
          "    // Try to refresh token first",
          "    const refreshed = await refreshToken(isAdmin);",
          "    if (refreshed) {",
          "        return; // Successfully refreshed",
          "    }",
          "",
          "    // If refresh failed, get new token",
          "    await getNewToken(isAdmin);",
          "};",
          "",
          "// Quotes only use regular user token",
          "manageToken(false);"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Get Latest Quote",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has quote data', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.have.property('price');",
              "    pm.expect(response).to.have.property('timestamp');",
              "    pm.expect(response.isin).to.eql('US0378331005');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/quotes/stock/US0378331005/latest",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "stock", "US0378331005", "latest"]
        }
      }
    },
    {
      "name": "Get Quote History",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of historical quotes', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('timestamp');",
              "        pm.expect(response[0]).to.have.property('isin');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/quotes/stock/US0378331005/history",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "stock", "US0378331005", "history"]
        }
      }
    },
    {
      "name": "Get Intraday Quotes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of intraday quotes', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('timestamp');",
              "        pm.expect(response[0]).to.have.property('isin');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/quotes/stock/US0378331005/intraday",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "stock", "US0378331005", "intraday"]
        }
      }
    },
    {
      "name": "Get Portfolio Quotes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of portfolio quotes', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('isin');",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('timestamp');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/quotes/portfolio/{{portfolioId}}/quotes",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "portfolio", "{{portfolioId}}", "quotes"]
        }
      }
    },
    {
      "name": "Get Holding Quotes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function() {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is an array of holding quotes', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response).to.be.an('array');",
              "    if (response.length > 0) {",
              "        pm.expect(response[0]).to.have.property('isin');",
              "        pm.expect(response[0]).to.have.property('price');",
              "        pm.expect(response[0]).to.have.property('timestamp');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/quotes/holding/{{holdingId}}/quotes",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "holding", "{{holdingId}}", "quotes"]
        }
      }
    },
    {
      "name": "Get Quotes Without Auth (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 401', function() {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Response has correct error message', function() {",
              "    const response = pm.response.json();",
              "    pm.expect(response.error).to.have.property('message');",
              "    pm.expect(response.error.message).to.include('Unauthorized');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{baseUrl}}/quotes/stock/US0378331005/latest",
          "host": ["{{baseUrl}}"],
          "path": ["quotes", "stock", "US0378331005", "latest"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api"
    }
  ]
}

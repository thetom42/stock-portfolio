import { Quote, HistoricalQuote, QuoteInterval, RealTimeQuote, QuoteHistory } from '../models/Quote';
import { getYahooFinanceService } from './yahooFinanceService';
import { getQuoteRepository, getStockRepository } from '../utils/database';
import { Decimal } from '@prisma/client/runtime/library';

// Helper function to map DB Quote to BFF Quote
const mapDBQuoteToBFF = (dbQuote: any): Quote => ({
  id: dbQuote.QUOTES_ID,
  stockId: dbQuote.ISIN,
  price: Number(dbQuote.PRICE),
  currency: dbQuote.CURRENCY,
  timestamp: dbQuote.MARKET_TIME
});

// Get real-time quote for a stock
export const getRealTimeQuote = async (stockId: string): Promise<RealTimeQuote> => {
  const stockRepo = getStockRepository();
  const quoteRepo = getQuoteRepository();

  const stock = await stockRepo.findByISIN(stockId);
  if (!stock) {
    throw new Error('Stock not found');
  }

  const yahooFinance = getYahooFinanceService();
  const quote = await yahooFinance.getRealTimeQuote(stock.ISIN);

  // Store the quote in our database
  // Note: QUOTES_ID is auto-generated by Prisma despite the type definition
  const dbQuote = await quoteRepo.create({
    QUOTES_ID: '', // This will be ignored/auto-generated by Prisma
    ISIN: stock.ISIN,
    PRICE: new Decimal(quote.price),
    CURRENCY: quote.currency,
    MARKET_TIME: new Date(quote.timestamp),
    EXCHANGE: quote.exchange
  });

  // Get previous quote for price change calculation
  const prevQuote = await quoteRepo.findLatestByStock(stock.ISIN);
  const previousPrice = prevQuote ? Number(prevQuote.PRICE) : quote.price;
  const change = quote.price - previousPrice;
  const changePercent = (change / previousPrice) * 100;

  return {
    price: quote.price,
    change,
    changePercent,
    timestamp: new Date(quote.timestamp)
  };
};

// Get historical quotes for a stock
export const getHistoricalQuotes = async (
  stockId: string,
  interval: QuoteInterval
): Promise<QuoteHistory> => {
  const stockRepo = getStockRepository();
  const quoteRepo = getQuoteRepository();

  const stock = await stockRepo.findByISIN(stockId);
  if (!stock) {
    throw new Error('Stock not found');
  }

  const yahooFinance = getYahooFinanceService();
  const yahooQuotes = await yahooFinance.getHistoricalQuotes(stock.ISIN, {
    interval: interval.interval,
    range: interval.range
  });

  // Map Yahoo Finance quotes to our model structure and store in database
  const quotes: HistoricalQuote[] = await Promise.all(
    yahooQuotes.map(async (yq) => {
      // Store only the closing price in our database
      await quoteRepo.create({
        QUOTES_ID: '', // This will be ignored/auto-generated by Prisma
        ISIN: stock.ISIN,
        PRICE: new Decimal(yq.close),
        CURRENCY: 'USD', // Yahoo Finance default
        MARKET_TIME: yq.date,
        EXCHANGE: 'YAHOO'
      });

      // Return the full historical quote data without storing extra fields
      return {
        date: yq.date,
        open: yq.open,
        high: yq.high,
        low: yq.low,
        close: yq.close,
        adjustedClose: yq.adjClose,
        volume: yq.volume
      };
    })
  );

  return {
    symbol: stock.SYMBOL,
    interval: interval.interval,
    quotes
  };
};

// Get latest quotes for multiple stocks
export const getLatestQuotes = async (stockIds: string[]): Promise<Quote[]> => {
  if (stockIds.length === 0) {
    return [];
  }

  const quoteRepo = getQuoteRepository();
  const quotes = [];

  for (const stockId of stockIds) {
    const quote = await quoteRepo.findLatestByStock(stockId);
    if (quote) {
      quotes.push(mapDBQuoteToBFF(quote));
    }
  }

  return quotes;
};

// Get quote history from database
export const getQuoteHistory = async (
  stockId: string,
  startDate: Date,
  endDate: Date
): Promise<Quote[]> => {
  const quoteRepo = getQuoteRepository();
  const quotes = await quoteRepo.findByStockAndTimeRange(stockId, startDate, endDate);
  return quotes.map(mapDBQuoteToBFF);
};

// Get intraday quotes
export const getIntradayQuotes = async (stockId: string): Promise<Quote[]> => {
  const stockRepo = getStockRepository();
  const quoteRepo = getQuoteRepository();

  const stock = await stockRepo.findByISIN(stockId);
  if (!stock) {
    throw new Error('Stock not found');
  }

  const yahooFinance = getYahooFinanceService();
  const yahooQuotes = await yahooFinance.getIntradayQuotes(stock.ISIN);

  // Store intraday quotes in database
  await Promise.all(
    yahooQuotes.map(yq => 
      quoteRepo.create({
        QUOTES_ID: '', // This will be ignored/auto-generated by Prisma
        ISIN: stock.ISIN,
        PRICE: new Decimal(yq.price),
        CURRENCY: 'USD', // Yahoo Finance default
        MARKET_TIME: new Date(yq.timestamp),
        EXCHANGE: 'YAHOO'
      })
    )
  );

  // Get today's quotes from database
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);

  const quotes = await quoteRepo.findByStockAndTimeRange(stock.ISIN, today, tomorrow);
  return quotes.map(mapDBQuoteToBFF);
};

import { Request, Response, NextFunction } from 'express';
import { CreateTransactionDTO, Transaction } from '../models/Holding';
import { getTransactionRepository, getHoldingRepository, getPortfolioRepository } from '../utils/database';

export const createTransaction = async (
  req: Request<{ holdingId: string }, {}, CreateTransactionDTO>,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = req.user!.id;
    const holdingId = req.params.holdingId;
    const transactionData = req.body;

    // Verify holding ownership through portfolio
    const holdingRepo = getHoldingRepository();
    const holding = await holdingRepo.findById(holdingId);
    
    if (!holding) {
      return res.status(404).json({ message: 'Holding not found' });
    }

    const portfolioRepo = getPortfolioRepository();
    const portfolio = await portfolioRepo.findById(holding.PORTFOLIOS_ID);
    
    if (!portfolio || portfolio.USERS_ID !== userId) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    // Create the transaction
    const transactionRepo = getTransactionRepository();
    const transaction = await transactionRepo.create({
      TRANSACTIONS_ID: '', // Will be generated by the repository
      HOLDINGS_ID: holdingId,
      BUY: transactionData.BUY,
      TRANSACTION_TIME: new Date(),
      AMOUNT: transactionData.AMOUNT,
      PRICE: transactionData.PRICE,
      COMMISSION: transactionData.COMMISSION || 0,
      BROKER: transactionData.BROKER || 'SYSTEM'
    });

    // Update holding quantity
    const newQuantity = transactionData.BUY
      ? holding.QUANTITY + transactionData.AMOUNT
      : holding.QUANTITY - transactionData.AMOUNT;

    if (newQuantity < 0) {
      return res.status(400).json({ message: 'Insufficient holding quantity for sell transaction' });
    }

    await holdingRepo.update(holdingId, { QUANTITY: newQuantity });

    res.status(201).json(transaction);
  } catch (error) {
    next(error);
  }
};

export const getTransaction = async (
  req: Request<{ id: string }>,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = req.user!.id;
    const transactionId = req.params.id;

    const transactionRepo = getTransactionRepository();
    const transaction = await transactionRepo.findById(transactionId);

    if (!transaction) {
      return res.status(404).json({ message: 'Transaction not found' });
    }

    // Verify ownership through holding and portfolio
    const holdingRepo = getHoldingRepository();
    const holding = await holdingRepo.findById(transaction.HOLDINGS_ID);
    
    if (!holding) {
      return res.status(404).json({ message: 'Holding not found' });
    }

    const portfolioRepo = getPortfolioRepository();
    const portfolio = await portfolioRepo.findById(holding.PORTFOLIOS_ID);
    
    if (!portfolio || portfolio.USERS_ID !== userId) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    res.json(transaction);
  } catch (error) {
    next(error);
  }
};

export const getTransactionsByHolding = async (
  req: Request<{ holdingId: string }>,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = req.user!.id;
    const holdingId = req.params.holdingId;

    // Verify holding ownership
    const holdingRepo = getHoldingRepository();
    const holding = await holdingRepo.findById(holdingId);
    
    if (!holding) {
      return res.status(404).json({ message: 'Holding not found' });
    }

    const portfolioRepo = getPortfolioRepository();
    const portfolio = await portfolioRepo.findById(holding.PORTFOLIOS_ID);
    
    if (!portfolio || portfolio.USERS_ID !== userId) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    // Get transactions
    const transactionRepo = getTransactionRepository();
    const transactions = await transactionRepo.findByHolding(holdingId);

    res.json(transactions);
  } catch (error) {
    next(error);
  }
};

export const getTransactionsByPortfolio = async (
  req: Request<{ portfolioId: string }>,
  res: Response,
  next: NextFunction
) => {
  try {
    const userId = req.user!.id;
    const portfolioId = req.params.portfolioId;

    // Verify portfolio ownership
    const portfolioRepo = getPortfolioRepository();
    const portfolio = await portfolioRepo.findById(portfolioId);
    
    if (!portfolio || portfolio.USERS_ID !== userId) {
      return res.status(403).json({ message: 'Unauthorized' });
    }

    // Get holdings for the portfolio
    const holdingRepo = getHoldingRepository();
    const holdings = await holdingRepo.findByPortfolio(portfolioId);

    // Get transactions for all holdings
    const transactionRepo = getTransactionRepository();
    const transactionPromises = holdings.map(holding => 
      transactionRepo.findByHolding(holding.HOLDINGS_ID)
    );
    
    const transactionArrays = await Promise.all(transactionPromises);
    const transactions = transactionArrays.flat();

    // Sort by transaction time descending
    transactions.sort((a, b) => 
      b.TRANSACTION_TIME.getTime() - a.TRANSACTION_TIME.getTime()
    );

    res.json(transactions);
  } catch (error) {
    next(error);
  }
};
